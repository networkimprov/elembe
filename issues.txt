Elembe Issues

features
  project data has .home page oid
    checkbox on names palette to make current pg home
  part description in revision.map
  notice to user and set read-only when loaded pages revised/sidelined
    push loaded page to rev cache on user ack
    not for revision author
  revision history
    tag current revision div for bgcolor
    if current page in current revision, highlight page div
  map of pendingRev
    undo revert?
    ?allow sideline instead of revert; distribute to nodes
    enable defer of items
      select all, page, part
      request confirmation on commit
  sidelining
    don't sideline pendingRev
      store conflicting revs (including sidelined parents) in map.conflict
        in display map, highlight conflicting pages/parts
        checkConflict() set map.conflict[rev]=1
      on commit, warn of conflicts
    force save of client data before applying incoming rev?
    parts of previous/sidelined rev can be pushed into pendingrev
      disable recall checkboxes, enable when new rev replaces object
        keep {oid:last-rev, ...} table to lookup last-rev of objects in new rev
  desktop app support
    share/drop directory
      new files land in user scratch project
      directories for active projects?
    in share directories:
      file: "--- DON'T MAKE NEW FILES HERE ---" 
      file to remind user to get pathname via attachment ui
  user profiles
    table with uuid, data (json), aes key
    my-profiles project
      editor app
  client
    pin button on palettes to prevent close on project switch
    on revision, update page in titles palette
    prevent add member when no revision filed
    alternate page editors; pgedit code to module
    pgedit undo/redo
    linked text fields call paletteEvent with value { name:value, ... }
    flag if node busy with syncTo, option to interrupt //
      if interrupted, syncFrom side restart
    add-members
      select service if not set
      take multiple aliases; check all before adding
    service editor
      if not on main service, option to join it
    layout editor
      for search result, highlight part
    attachment editor
      add image-viewer features
      present text formats in iframe
      display extracted metadata, most common keywords
      allow user to open files with File->Open dialog
        on Attachment>GetPathname, provide copy/cut-able pathname
        on cut, show path in gray; on click, highlight path
    note/discussion editor
  authorize new client for session or permanent access
    authenticate sync node
  xapian module and search features

code cleanup
  Use prepared stmts when including parameters from relay messages
  rename 'import' functions; move body of each case to separate function
  replace literals with constants
  apply all codestyle name conventions
  rev pendingRev.map in one place

fix: writePart reliability: store tmp file, update map with flag, finishPart, check map on start
fix: fs.writeFile can leave partial files on crash
fix: external app save right before commit can omit part from map
fix: prevent concurrent access to projects db from Project methods
     step catch locked error and retry
fix: on sideline of rev with new page, prevent page data deletion

createSchema include \n\n; to enable sql.replace() to include code in tx
  remove workarounds in subsequent txs (INSERT OR IGNORE, etc)

sync all written files prior to commit
fs transaction class
  create, open, mkdir, rename
  record/open fds for each method
  fsync fds on commit (syscall to sync multiple fds?)

dupDb function - use sqlite online backup api

verify request parameter types
verify client message parameters

factory-reset op

samba share data/files, move cache dirs
purge algorithms for RevisionCache & EditCache
  on foreign rev and file open, set .w file read-only and mv to revcache

comments
  protection against inconsistency when saving data and submitting relay msg
  checkconflict logic; appending local uuid to incoming revs

testing
  verify each via result_query, expected_result
  playback push variable # of requests in recording to queue? to test concurrency issues
    prevent connection to relay? (register wipes out alias)
  sequence branch
    run node aa aaef
    on run, if current test (aa) matches target (aaef), find tests with aae in target

event & error logging; log rotation

encryption
  project aes key
  user public key, hosted CA, relay request & store certs, store certs in user profiles
  en/decrypt messages on queue/deliver

fix: wsstream << bug: b[0] + (b[1] << 1*8) + (b[2] << 2*8) + (b[3] << 3*8 >>> 0) 
wsstream read from filestream; sServices._sendNext send file
wsstream write incrementally; sServices.on('deliver') stream data after header
stream data to http connections

port to node 0.8
  create new sqlite module
  fs.utimes in dupFile
  native inotify api

service db store IP addr & alternates
  use DNS if no IP addr stored
  service may update IP list

bug: db writes for async messages (registered) can be out of order

sServices: 'deliver' message callback take success argument
  login/info msgs rename to authenticate/authenticated

relay multi-node support
  newService message
  at 2ndary service, on first register, create spare node (?)
    other nodes copy spare node queue (in response to newService msg)
    remove spare node after n days
  register set joined-date in user db, return in any response (?)
  register on alias update post registered msg to nodes //

node-to-node sync
  allow user to name nodes from lists of colors, animals, flowers, etc
    randomly sort list when user selects
  syncTo reject if not joined public service//
  handle (clear?) pending service changes post-sync
  on registered queue newService msg to public svc, skip sender
    on newService (only allowed from public svc)
      insert db, create svc
  conflict mgmt
    find in-progress rev by WHERE rowid = 1//
    generate pendingrev oid & date on edit//
    on arrival of rev by same author, and pendingRev conflict
      don't sideline/delete; clear pendingRev.map and temp files of items with date <= incoming
    on commit update oid if pendingRev.node!=sNodeOffset//
    on in-progress rev update, store date & local offset//
      on project open, if local offset != in-progress rev, inform user//
    revs include last-edit node offset//
      conflicting revs from same author resolved by later date, then higher-numbered node// (log same-date coincidence)
  backup in-progress revision data to user nodes
    do backup pass prior to sync?
    store last-backup revisionmap
    on revisionMap save, flag project for backup in projects db
      if priority was claimed, backup now
      need last-touch time for op:'+' items
      on commit, clear flag
    every N hours, find flagged projects
      for changed parts & pages, xdDiff prev-rev working-rev, make backup msg, send, update last-backup revmap
    on backup msg, merge changes into in-progress rev
      if in-progress rev is sidelined, apply backup to sidelined rev
      if nodeoffsets different, skip overlapping changes from lower-priority node
  send outbound queue data post-sync
  update progress bar
  network connect, error handling
  authenticate calling node
  during sync pause services or return try-later error on svc request
  block use of new node if main svc offline?
  send file via zlib, open(O_NOATIME), posix_fadvise(DONTNEED)
  support record/playback in /sync http requests

websocket.MQ
  fix copyQueue can fail if quiet list deletes queue too soon
  reserve deleted aliases which have been used
  multiple apps/ports per node
  prompt user to restart or deactivate unused nodes
  suspend inactive users, purge updates & notify projects; returning user issues rejoin request

applaunch
  prevent ipv6 and all-numeric addresses

backup server
  initial backup by sync node, encrypt pkg with user password
  periodically connect to relay, store messages
  on user restore, send pkg (node decrypts), send messages in blocks
  ? node occasionally calls host, provides password, host integrates pending messages


sidelining draft

rev a1  prev _   map aa-af
rev a2  prev a1  map aa
rev b1  prev a2  map ac ae
--
rev a3  prev b1  map aa ab
rev a4  prev a3  map ac ad     direct conflict
cur a            map ad af     indirect conflict
--
rev b2  prev b1  map aa ae     direct conflict
rev b3  prev b2  map ac

choose winner
  step thru revs until row.oid == new.prev, log conflicting revs
    no conflicts, done
  find most-senior author
    if new author most-senior
      undo, forwardize, sideline conflicting revs and any revs descended from THEM
      if curr conflicts commit to sideline
      reset clientstate in affected pages
    else
      sideline new rev
  update client
    remove sidelined pages; set rev mode if current page removed
    notify sidelining of current edits
  readRev does rewind-then-foward for a sidelined rev; skip sidelined on back phase
  parts of sidelined rev can be pushed into current
  force save of client data before applying rev?

branching
  step thru revs to prev, log revs with conflicts between maps
    no conflicts, done
    prev in branch, include in branch
    conflicts in branched revs, set branch for incoming
    conflicts in branched revs and non-branched, ???
  log revs descended from conflicted revs
  set branch and forwardize logged revs
  commit current in branch if conflicted
  set branch for incoming rev
  goBranch applies revs in revisioncache


