Elembe Issues

code cleanup
  Use prepared stmts when including parameters from relay messages
  rename 'import' functions
  replace literals with constants
  apply all codestyle name conventions
  turn into classes with methods: revisionMap, parentMap

storeFile use temporary directory (?) to avoid partial files on crash
sync all written files prior to commit

verify request parameter types
verify client message parameters

notice to user and set read-only when loaded pages revised/sidelined
  push loaded page to rev cache on user ack
  not for revision author

Sidelining
  flag when uncommitted revision sidelined
  force save of client data before applying incoming rev?
  parts of sidelined rev can be pushed into current revision

desktop app support
  on foreign rev and file open, set .w file read-only and mv to revcache

purge algorithms for RevisionCache & EditCache

comments
  protection against inconsistency when saving data and submitting relay msg
  checkconflict logic; appending local uuid to incoming revs

create thorough test sequence

event & error logging; log rotation

encryption
  project aes key
  user public key, hosted CA, relay request & store certs, store certs in user profiles
  en/decrypt messages on queue/deliver

wsstream read from filestream; sServices._sendNext send file
wsstream write incrementally; sServices.on('deliver') stream data after header
stream data to http connections

profiles
  table with uuid, data (json), aes key
  my-profiles project
    editor app

client
  on revision, update page in titles palette
  prevent add member when no revision filed
  alternate page editors; pgedit code to module
  pgedit undo/redo

port to node 0.5
switch to sqlite3 module
fs.utimes in dupFile

activate new node for user
  primary contact secondary, provide uid, nodeid, service list
  secondary register with services, hold any new msgs til project arrives
  primary send projects
  primary display progress bar

xapian module and search features

websocket.MQ
  multiple apps/ports per node
  prompt user to restart or deactivate unused nodes
  suspend inactive users, purge updates & notify projects; returning user issues rejoin request

applaunch
  prevent ipv6 and all-numeric addresses



sidelining scratch space

rev a1  prev _   map aa-af
rev a2  prev a1  map aa
rev b1  prev a2  map ac ae
--
rev a3  prev b1  map aa ab
rev a4  prev a3  map ac ad     direct conflict
cur a            map ad af     indirect conflict
--
rev b2  prev b1  map aa ae     direct conflict
rev b3  prev b2  map ac

choose winner
  step thru revs until row.oid == new.prev, log conflicting revs
    no conflicts, done
  find most-senior author
    if new author most-senior
      undo, forwardize, sideline conflicting revs and any revs descended from THEM
      if curr conflicts commit to sideline
      reset clientstate in affected pages
    else
      sideline new rev
  update client
    remove sidelined pages; set rev mode if current page removed
    notify sidelining of current edits
  readRev does rewind-then-foward for a sidelined rev; skip sidelined on back phase
  parts of sidelined rev can be pushed into current
  force save of client data before applying rev?

branching
  step thru revs to prev, log revs with conflicts between maps
    no conflicts, done
    prev in branch, include in branch
    conflicts in branched revs, set branch for incoming
    conflicts in branched revs and non-branched, ???
  log revs descended from conflicted revs
  set branch and forwardize logged revs
  commit current in branch if conflicted
  set branch for incoming rev
  goBranch applies revs in revisioncache


